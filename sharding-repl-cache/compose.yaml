name: sharding-repl-cache

services:

  pymongo_api:
    image: kazhem/pymongo_api:1.0.0
    ports:
      - "8000:8080"
    environment:
      MONGODB_URL: ${MONGODB_URL}
      MONGODB_DATABASE_NAME: ${MONGODB_DATABASE_NAME}
      REDIS_URL: ${REDIS_URL}
    networks:
      - app-network
  redisSrv:
      image: "redis:latest"
      container_name: redisSrv
      ports:
        - "6379:6379"
      volumes:
        - redis-data:/data
      networks:
        - app-network
#        app-network:
#          ipv4_address: 173.18.0.2

  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    ports:
      - "27018:27018"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.9
    volumes:
      - shard1_1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    ports:
      - "27019:27019"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.8
    volumes:
      - shard1_2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_3:
    image: mongo:latest
    container_name: shard1_3
    restart: always
    ports:
      - "27020:27020"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.7
    volumes:
      - shard1_3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    ports:
      - "27021:27021"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.6
    volumes:
      - shard2_1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    ports:
      - "27022:27022"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.5
    volumes:
      - shard2_2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_3:
    image: mongo:latest
    container_name: shard2_3
    restart: always
    ports:
      - "27023:27023"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.4
    volumes:
      - shard2_3-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27024:27024"
    networks:
      - app-network
#      app-network:
#        ipv4_address: 173.18.0.3
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16
volumes:
  config-data:
  shard1_1-data:
  shard1_2-data:
  shard1_3-data:
  shard2_1-data:
  shard2_2-data:
  shard2_3-data:
  redis-data:
